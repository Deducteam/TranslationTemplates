#REQUIRE connectives_or_ex.

def Set_mu : Type := connectives_or_ex.Set.

def El_mu : Set_mu -> Type := connectives_or_ex.El.

def Prop_mu : Type := connectives_or_ex.Prop.

def Prf_mu : Prop_mu -> Type := connectives_or_ex.Prf.

def o_mu : Set_mu := connectives_or_ex.o.

def arr_mu :
  Set_mu -> Set_mu -> Set_mu
  :=
  connectives_or_ex.arr.

def and_mu :
  Prop_mu -> Prop_mu -> Prop_mu
  :=
  p => q => connectives_or_ex.not (connectives_or_ex.or (connectives_or_ex.not p) (connectives_or_ex.not q)).

def all_mu :
  a:Set_mu ->
  ((El_mu a) -> Prop_mu) -> Prop_mu
  :=
  a => p=> connectives_or_ex.not (connectives_or_ex.ex a (x => connectives_or_ex.not (p x))).

def not_mu :
  Prop_mu -> Prop_mu
  :=
  connectives_or_ex.not.

def bot_mu : Prop_mu := connectives_or_ex.bot.

def and_i_mu :
  p:Prop_mu ->
  (Prf_mu p) ->
  q:Prop_mu ->
  (Prf_mu q) -> Prf_mu (and_mu p q)
  :=
  p => pP => q => pQ => 
  connectives_or_ex.neg_i 
    (connectives_or_ex.or (connectives_or_ex.not p) (connectives_or_ex.not q)) 
    (pnPnQ => connectives_or_ex.or_e (connectives_or_ex.not p) (connectives_or_ex.not q) pnPnQ connectives_or_ex.bot
      (pnP => connectives_or_ex.neg_e p pnP pP)
      (pnQ => connectives_or_ex.neg_e q pnQ pQ)).

def and_el_mu :
  p:Prop_mu ->
  q:Prop_mu ->
  (Prf_mu (and_mu p q)) -> Prf_mu p
  :=
  p => q => pPQ => 
  connectives_or_ex.dne p 
    (connectives_or_ex.neg_i 
      (connectives_or_ex.not p)
      (pnP => connectives_or_ex.neg_e
        (connectives_or_ex.or (connectives_or_ex.not p) (connectives_or_ex.not q))
        pPQ
        (connectives_or_ex.or_il (connectives_or_ex.not p) pnP (connectives_or_ex.not q)))).

def and_er_mu :
  p:Prop_mu ->
  q:Prop_mu ->
  (Prf_mu (and_mu p q)) -> Prf_mu q
  :=
  p => q => pPQ => 
  connectives_or_ex.dne q 
    (connectives_or_ex.neg_i 
      (connectives_or_ex.not q)
      (pnQ => connectives_or_ex.neg_e
        (connectives_or_ex.or (connectives_or_ex.not p) (connectives_or_ex.not q))
        pPQ
        (connectives_or_ex.or_ir (connectives_or_ex.not p) (connectives_or_ex.not q) pnQ))).

def all_i_mu :
  a:Set_mu ->
  p:((El_mu a) -> Prop_mu) ->
  (x:(El_mu a) -> Prf_mu (p x)) ->
  Prf_mu (all_mu a p)
  :=
  a => p => pPx => 
  connectives_or_ex.neg_i 
    (connectives_or_ex.ex a (x => connectives_or_ex.not (p x)))
    (pEN => connectives_or_ex.ex_e a (x => connectives_or_ex.not (p x)) pEN connectives_or_ex.bot
      (t => pPt => connectives_or_ex.neg_e
        (p t)
        pPt
        (pPx t))).

def all_e_mu :
  a:Set_mu ->
  p:((El_mu a) -> Prop_mu) ->
  (Prf_mu (all_mu a p)) ->
  x:(El_mu a) -> Prf_mu (p x)
  :=
  a => p => pNE => t => 
  connectives_or_ex.dne (p t) 
    (connectives_or_ex.neg_i 
      (connectives_or_ex.not (p t))
      (pNPt => connectives_or_ex.neg_e 
        (connectives_or_ex.ex a (x => connectives_or_ex.not (p x)))
        pNE
        (connectives_or_ex.ex_i 
          a
          (x => connectives_or_ex.not (p x))
          t
          pNPt))).

def neg_i_mu :
  p:Prop_mu ->
  ((Prf_mu p) -> Prf_mu bot_mu) ->
  Prf_mu (not_mu p)
  :=
  connectives_or_ex.neg_i.

def neg_e_mu :
  p:Prop_mu ->
  (Prf_mu (not_mu p)) ->
  (Prf_mu p) -> Prf_mu bot_mu
  :=
  connectives_or_ex.neg_e.

def dne_mu :
  p:Prop_mu ->
  (Prf_mu (not_mu (not_mu p))) ->
  Prf_mu p
  :=
  connectives_or_ex.dne.

thm thm1_mu :
  p:Prop_mu ->
  (Prf_mu p) -> Prf_mu (and_mu p p)
  :=
  p => pP => and_i_mu p pP p pP.

