Set : Type.
def El : Set -> Type.
Prop : Type.
Prf : Prop -> Type.

o : Set.
[ ] El o --> Prop.
arr : Set -> Set -> Set.
[x, y] El (arr x y) --> El x -> El y.

and : Prop -> Prop -> Prop.
all : a : Set -> (El a -> Prop) -> Prop.
not : Prop -> Prop.
bot : Prop.

and_i : p : Prop -> Prf p -> q : Prop -> Prf q -> Prf (and p q).
and_el : p : Prop -> q : Prop -> Prf (and p q) -> Prf p.
and_er : p : Prop -> q : Prop -> Prf (and p q) -> Prf q.

all_i : a : Set -> p : (El a -> Prop) -> (x : El a -> Prf (p x)) -> Prf (all a p).
all_e : a : Set -> p : (El a -> Prop) -> Prf (all a p) -> x : El a -> Prf (p x).

neg_i : p : Prop -> (Prf p -> Prf bot) -> Prf (not p).
neg_e : p : Prop -> Prf (not p) -> Prf p -> Prf bot.

dne : p : Prop -> Prf (not (not p)) -> Prf p.

thm thm1 : p : Prop -> Prf p -> Prf (and p p)
:= p => pP => and_i p pP p pP.