Prop : Type.
injective Prf : Prop -> Type.
Set : Type.
injective El : Set -> Type.

o : Set.
[ ] El o --> Prop.
arr : Set -> Set -> Set.
[x,y] El (arr x y) --> El x -> El y.

imp : Prop -> Prop -> Prop.
and : Prop -> Prop -> Prop.
or : Prop -> Prop -> Prop.
top : Prop.
bot : Prop.
all : a : Set -> (El a -> Prop) -> Prop.
ex : a : Set -> (El a -> Prop) -> Prop.
not : Prop -> Prop.

imp_i : p : Prop -> q : Prop -> (Prf p -> Prf q) -> Prf (imp p q).
imp_e : p : Prop -> q : Prop -> Prf (imp p q) -> Prf p -> Prf q.

and_i : p : Prop -> Prf p -> q : Prop -> Prf q -> Prf (and p q).
and_el : p : Prop -> q : Prop -> Prf (and p q) -> Prf p.
and_er : p : Prop -> q : Prop -> Prf (and p q) -> Prf q.

or_il : p : Prop -> Prf p -> q : Prop -> Prf (or p q).
or_ir : p : Prop ->  q : Prop -> Prf q -> Prf (or p q).
or_e : p : Prop -> q : Prop -> Prf (or p q) -> r : Prop -> (Prf p -> Prf r) -> (Prf q -> Prf r) -> Prf r.

neg_i : p : Prop -> (Prf p -> Prf bot) -> Prf (not p).
neg_e : p : Prop -> Prf (not p) -> Prf p -> Prf bot.

top_i : Prf top.
bot_e : Prf bot -> p : Prop -> Prf p.

all_i : a : Set -> p : (El a -> Prop) -> (x : El a -> Prf (p x)) -> Prf (all a p).
all_e : a : Set -> p : (El a -> Prop) -> Prf (all a p) -> x : El a -> Prf (p x).

ex_i : a : Set -> p : (El a -> Prop) -> t : El a -> Prf (p t) -> Prf (ex a p).
ex_e : a : Set -> p : (El a -> Prop) -> Prf (ex a p) -> r : Prop -> (x : El a -> Prf (p x) -> Prf r) -> Prf r.

pem : p : Prop -> Prf (or p (not p)).