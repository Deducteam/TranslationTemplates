#REQUIRE connectives_or.

def Prop_mu : Type := connectives_or.Prop.

def Prf_mu : Prop_mu -> Type := connectives_or.Prf.

def and_mu :
  Prop_mu -> Prop_mu -> Prop_mu
  :=
  p => q => connectives_or.not (connectives_or.or (connectives_or.not p) (connectives_or.not q)).

def not_mu :
  Prop_mu -> Prop_mu
  :=
  connectives_or.not.

def bot_mu : Prop_mu := connectives_or.bot.

def and_i_mu :
  p_mu:Prop_mu ->
  (Prf_mu p_mu) ->
  q_mu:Prop_mu ->
  (Prf_mu q_mu) -> Prf_mu (and_mu p_mu q_mu)
  :=
  p => pP => q => pQ => 
  connectives_or.neg_i 
    (connectives_or.or (connectives_or.not p) (connectives_or.not q)) 
    (pnPnQ => connectives_or.or_e (connectives_or.not p) (connectives_or.not q) pnPnQ connectives_or.bot
      (pnP => connectives_or.neg_e p pnP pP)
      (pnQ => connectives_or.neg_e q pnQ pQ)).

def and_el_mu :
  p_mu:Prop_mu ->
  q_mu:Prop_mu ->
  (Prf_mu (and_mu p_mu q_mu)) -> Prf_mu p_mu
  :=
  p => q => pPQ => 
  connectives_or.dne p 
    (connectives_or.neg_i 
      (connectives_or.not p)
      (pnP => connectives_or.neg_e
        (connectives_or.or (connectives_or.not p) (connectives_or.not q))
        pPQ
        (connectives_or.or_il (connectives_or.not p) pnP (connectives_or.not q)))).

def and_er_mu :
  p_mu:Prop_mu ->
  q_mu:Prop_mu ->
  (Prf_mu (and_mu p_mu q_mu)) -> Prf_mu q_mu
  :=
  p => q => pPQ => 
  connectives_or.dne q 
    (connectives_or.neg_i 
      (connectives_or.not q)
      (pnQ => connectives_or.neg_e
        (connectives_or.or (connectives_or.not p) (connectives_or.not q))
        pPQ
        (connectives_or.or_ir (connectives_or.not p) (connectives_or.not q) pnQ))).

def neg_i_mu :
  p_mu:Prop_mu ->
  ((Prf_mu p_mu) -> Prf_mu bot_mu) ->
  Prf_mu (not_mu p_mu)
  :=
  connectives_or.neg_i.

def neg_e_mu :
  p_mu:Prop_mu ->
  (Prf_mu (not_mu p_mu)) ->
  (Prf_mu p_mu) -> Prf_mu bot_mu
  :=
  connectives_or.neg_e.

def dne_mu :
  p_mu:Prop_mu ->
  (Prf_mu (not_mu (not_mu p_mu))) ->
  Prf_mu p_mu
  :=
  connectives_or.dne.

thm thm1_mu :
  p_mu:Prop_mu ->
  (Prf_mu p_mu) -> Prf_mu (and_mu p_mu p_mu)
  :=
  p_mu => pP_mu => and_i_mu p_mu pP_mu p_mu pP_mu.

